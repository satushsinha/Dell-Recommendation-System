# -*- coding: utf-8 -*-
"""Dell_Visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMqN_AO-yczy-392SG6FgUq1TQ2dd8wq
"""

import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import r2_score

dataset=pd.read_csv('/content/products.csv')

dataset.head()

dataset['Price'] = dataset['Price'].astype(str) #Changing the cost to string
dataset['Price'] = dataset['Price'].apply(lambda x: x.replace('.','')) #Using lambda function to replace ',' from cost

for i in range(0,38):
  dataset["Price"][i]=dataset["Price"][i][1:]

dataset['Price'] = dataset['Price'].astype(float) # Changing the cost to Float

dataset['Rating'] = dataset['Rating'].astype(float)

#Get Correlation between different variables
corr = dataset.corr(method='kendall')
plt.figure(figsize=(15,8))
sns.heatmap(corr, annot=True)
plt.savefig("correlation.png")
dataset.columns

dataset = dataset.sort_values('Rating',ascending=False)

dataset

sns.countplot(dataset['Price'])
sns.countplot(dataset['Price']).set_xticklabels(sns.countplot(dataset['Price']).get_xticklabels(), rotation=90, ha="right")
fig = plt.gcf()
fig.set_size_inches(15,15)
plt.title('Cost of Laptop')
plt.savefig('Cost of Laptop')

type_plt=pd.crosstab(dataset['Rating'],dataset['Price'])
type_plt.plot(kind='bar',stacked=True);
plt.title('Type - Rating',fontsize=15,fontweight='bold')
plt.ylabel('Type',fontsize=10,fontweight='bold')
plt.xlabel('Rating',fontsize=10,fontweight='bold')
plt.xticks(fontsize=10,fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold');
plt.savefig('Type and Rating')

dataset

price_range=[]
for i in range(0,38):
  if(dataset.iloc[i,1]>20000 and dataset.iloc[i,1]<30000):
    price_range.append("20000-30000")
  if(dataset.iloc[i,1]>30000 and dataset.iloc[i,1]<40000):
    price_range.append("30000-40000")
  if(dataset.iloc[i,1]>40000 and dataset.iloc[i,1]<50000):
    price_range.append("40000-50000")
  if(dataset.iloc[i,1]>50000 and dataset.iloc[i,1]<60000):
    price_range.append("50000-60000")
  if(dataset.iloc[i,1]>60000 and  dataset.iloc[i,1]<70000):
    price_range.append("60000-70000")
  if(dataset.iloc[i,1]>70000 and  dataset.iloc[i,1]<80000):
    price_range.append("70000-80000")
  if(dataset.iloc[i,1]>80000 and dataset.iloc[i,1]<90000):
    price_range.append("80000-90000")
  if(dataset.iloc[i,1]>90000 and dataset.iloc[i,1]<100000):
    price_range.append("90000-100000")
  if(dataset.iloc[i,1]>100000):
    price_range.append("100000-Above")

price_range=[]
for i in range(0,38):
  if(dataset.iloc[i,1]>20000 and dataset.iloc[i,1]<30000):
    price_range.append(20000)
  if(dataset.iloc[i,1]>30000 and dataset.iloc[i,1]<40000):
    price_range.append(30000)
  if(dataset.iloc[i,1]>40000 and dataset.iloc[i,1]<50000):
    price_range.append(40000)
  if(dataset.iloc[i,1]>50000 and dataset.iloc[i,1]<60000):
    price_range.append(50000)
  if(dataset.iloc[i,1]>60000 and  dataset.iloc[i,1]<70000):
    price_range.append(60000)
  if(dataset.iloc[i,1]>70000 and  dataset.iloc[i,1]<80000):
    price_range.append(70000)
  if(dataset.iloc[i,1]>80000 and dataset.iloc[i,1]<90000):
    price_range.append(80000)
  if(dataset.iloc[i,1]>90000 and dataset.iloc[i,1]<100000):
    price_range.append(90000)
  if(dataset.iloc[i,1]>100000):
    price_range.append(100000)

price_range

type_plt=pd.crosstab(df.iloc[:,3],df.iloc[:,5])
type_plt.plot(kind='bar',stacked=True);
plt.title('Type - Rating',fontsize=15,fontweight='bold')
plt.ylabel('Type',fontsize=10,fontweight='bold')
plt.xlabel('Rating',fontsize=10,fontweight='bold')
plt.xticks(fontsize=10,fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold');
plt.savefig('Type and Rating')

sns.countplot(price_range)
sns.countplot(price_range).set_xticklabels(sns.countplot(price_range).get_xticklabels(), rotation=90, ha="right")
fig = plt.gcf()
fig.set_size_inches(15,15)
plt.title('Cost of Laptop')
plt.savefig('Cost of Laptop')

price_range

X=dataset.iloc[:,:].values

price_range=pd.DataFrame(price_range)

price_range=price_range.iloc[:,:].values

price_range.shape

X.shape

df=np.concatenate((X,price_range),axis=1)

df=pd.DataFrame(df)

df

